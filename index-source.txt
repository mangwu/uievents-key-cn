<link href="./override.css" rel="stylesheet" />
<script defer src="./custom-script.js"></script>
<script src="./backup-script.js"></script>

<pre class="metadata">
Title: 用户界面事件键盘事件 key 属性值(UI Events KeyboardEvent key Values)
Shortname: uievents-key-cn
Level: none
Group: webapps
Status: UD
ED: 
Repository: mangwu/uievents-key-cn
Boilerplate: repository-issue-tracking off, copyright off, property-index off
No Editor: true
Text Macro: DATE 最近一次编译时间
Text Macro: LONGSTATUS 翻译草案
!本版本: <a href="https://mangwu.github.io/uievents-key-cn/">https://mangwu.github.io/uievents-key-cn/</a>
!最新提案: <a href="https://w3c.github.io/uievents-key/">https://w3c.github.io/uievents-key/</a>
!上个版本: <a href="https://www.w3.org/TR/2016/WD-uievents-key-20161024/">https://www.w3.org/TR/2016/WD-uievents-key-20161024/</a>
!历史记录: <a href="https://www.w3.org/standards/history/uievents-key">https://www.w3.org/standards/history/uievents-key</a>
!规范反馈: <a href="https://github.com/w3c/uievents-key/issues/">GitHub-w3c-uievents-key-issues</a>
!翻译反馈: <a href="https://github.com/mangwu/uievents-key-cn/issues/">GitHub-mangwu-uievents-key-cn-issues</a>
!实现报告: <a href="https://mangwu.github.io/uievents-key-cn/impl-report.html">https://mangwu.github.io/uievents-key-cn/impl-report.html</a>
!编辑者: 
	<a class="p-name fn u-email email" href="mailto:garykac@google.com">Gary Kacmarcik</a>(Google)
	<a class="p-name fn u-email email" href="mailto:travisleithead@hotmail.com">Travis Leithead</a>(Invited Expert)
!翻译者: 
	<a class="p-name fn u-email email" href="mailto:1185956753@qq.com">mangwu</a>
Abstract:
	<h2 class="no-num no-toc no-ref heading settled" id="abstract-cn">
	<span class="content">摘要</span>
	</h2>
	本规范定义的 [=键属性值=] 必须用于 {{KeyboardEvent}} 事件的
	{{KeyboardEvent/key}} 属性，该键属性被定义为用户界面事件规范 [[!UIEvents]] 
	的一部分。

	<h2 class="no-num no-toc no-ref heading settled" id="sotd-cn">
	<span class="content">文档状态</span>
	</h2>
	<div data-fill-with="status-cn">
		<p><em>
		本节介绍了本文件发布时的状态。
		当前 <abbr title="World Wide Web Consortium">W3C</abbr> 
		出版物列表和本技术报告的最新修订版可在
		<a href="https://www.w3.org/TR/">
		<abbr title="World Wide Web Consortium">W3C</abbr> 技术报告索引
		</a>
		中找到，网址为 https://www.w3.org/TR/ 。
		</em></p>

		<p> 本文件由
		<a href="https://www.w3.org/groups/wg/webapps">网络应用程序工作组</a>
		作为 <strong>编辑草稿</strong> (Editors Draft)发布。 
		<span class="del-content">本文档旨在成为W3C推荐标准</span> 。
		</p>

		<p></p>

		<p> 本文件由
		<a href="https://www.w3.org/groups/wg/webapps">网络应用程序工作组</a>
		作为 <strong>工作草案</strong> (Working Draft)发布。
		欢迎对本规范提出反馈和意见。请使用
		<a href="https://github.com/w3c/uievents-code/issues">GitHub issues</a>
		对源文档进行问题讨论; 请使用
		<a href="https://github.com/mangwu/uievents-code-cn/issues">GitHub issues</a>
		对翻译文档进行问题讨论; 
		官方的问题存档地址为
		<a href="https://lists.w3.org/Archives/Public/public-webapps/">
		public-webapps@w3.org archives
		</a> 。
		</p>

		<p>
		作为编辑草案出版并不意味着
		<abbr title="World Wide Web Consortium">W3C</abbr>
		及其成员的认可。 
		这是一份草案文档，可以随时被其他文档更新、替换或作废。
		本文档不适合被其它正在编写的规范作为引用。
		</p>

		<p> 本文档由一个根据
		<a href="https://www.w3.org/Consortium/Patent-Policy-20200915/">
		<abbr title="World Wide Web Consortium">W3C</abbr> 专利政策</a>
		运作的小组编写。
		<abbr title="World Wide Web Consortium">W3C</abbr>
		保留了一份与该小组可交付成果相关的
		<a href="https://www.w3.org/2004/01/pp-impl/114929/status" rel="disclosure">
		所有可披露专利的公开列表
		</a> ; 该页面还包括公开一份专利的说明。
		对认为包含
		<a 
		href=
		"https://www.w3.org/Consortium/Patent-Policy-20200915/#def-essential">
		基本权利要求
		</a>
		( Essential Claim(s) )的专利有实际了解的个人必须根据
		<a
		href=
		"https://www.w3.org/Consortium/Patent-Policy-20200915/#sec-Disclosure">
		<abbr title="World Wide Web Consortium">W3C</abbr>专利政策第6节
		</a> 
		公开信息。
		</p>

		<p>本文件受
		<a href="https://www.w3.org/2021/Process-20211102/" id="w3c_process_revision-cn">
		2021 11月2日 W3C处理文档</a> 规范管理。
		</p>
  </div>
</pre>

<pre class="biblio">
{
	"AndroidKeycode": {
		"title": "Android KeyEvent",
		"href": "http://developer.android.com/reference/android/view/KeyEvent.html",
		"publisher": "Google"
	},
	"DASE": {
		"title": "ATSC A/100-2, DTV Application Software Environment Level 1 (DASE-1) Part 2: Declarative Applications and Environment",
		"href": "http://atsc.org/standard/a100-dtv-application-software-environment-level-1-dase-1/",
		"publisher": "Advanced Television Systems Committee",
		"date": "09 March 2003"
	},
	"ISO9995-1": {
		"href": "http://www.iso.org/iso/home/store/catalogue_tc/catalogue_detail.htm?csnumber=51645",
		"title": "ISO/IEC 9995-1:2009 Information technology -- Keyboard layouts for text and office systems -- Part 1: General principles governing keyboard layouts",
		"publisher": "ISO"
	},
	"KeyEventJava": {
		"title": "Java™ Platform, Standard Edition 6 API Specification, Class java.awt.events.KeyEvent",
		"href": "http://docs.oracle.com/javase/6/docs/api/java/awt/event/KeyEvent.html",
		"publisher": "Oracle"
	},
	"KeysNet": {
		"title": ".NET Framework 4.5 Class Library, Keys Enumeration",
		"href": "http://msdn.microsoft.com/en-us/library/system.windows.forms.keys.aspx",
		"publisher": "Microsoft"
	},
	"OCAP": {
		"title": "Open Cable Application Platform 1.1.3",
		"href": "https://apps.cablelabs.com/specification/opencable-application-platform-ocap/",
		"publisher": "Cable Television Laboratories, Inc.",
		"date": "03 June 2010"
	},
	"WEB4CE": {
		"title": "ANSI/CTA-2014-B, Web-based Protocol and Framework for Remote User Interface on UPnP Networks and the Internet (Web4CE)",
		"href": "https://standards.cta.tech/apps/group_public/project/details.php?project_id=220",
		"publisher": "Consumer Technology Association",
		"date": "January 2011"
	},
	"WmAppCommand": {
		"title": "MSDN WM_APPCOMMAND message",
		"href": "https://msdn.microsoft.com/en-us/library/windows/desktop/ms646275(v=vs.85).aspx",
		"publisher": "Microsoft"
	}
}
</pre>

<pre class="anchors">
urlPrefix: https://mangwu.github.io/uievents-cn/#interface-; type: interface; spec: uievents;
	text: KeyboardEvent
urlPrefix: https://mangwu.github.io/uievents-cn/#dom-keyboardevent-; type: attribute; for: KeyboardEvent; spec: uievents;
	text: key
	text: code
	text: location
urlPrefix: https://mangwu.github.io/uievents-cn/#; type: dfn; spec: uievents;
	text: compositionupdate
	text: dead key
url: https://mangwu.github.io/uievents-cn/#key-legends; type: dfn; spec: uievents;
	text: 键帽
url: https://mangwu.github.io/uievents-code-cn/#key-code-attribute-values; type: dfn; spec: uievents-code;
	text: 按键码属性值
url: https://mangwu.github.io/uievents-code-cn/#keypad; type: dfn; spec: uievents-code;
	text: 小键盘
url: https://mangwu.github.io/uievents-code-cn/#alphanumeric-section; type: dfn; spec: uievents-code;
	text: 字母数字区域
url: https://mangwu.github.io/uievents-code-cn/#function-key; type: dfn; spec: uievents-code;
	text: 功能键
url: https://mangwu.github.io/uievents-code-cn/#numpad; type: dfn; spec: uievents-code;
	text: 数字板
url: https://mangwu.github.io/uievents-code-cn/#enter-edit-keys; type: dfn; spec: uievents-code;
	text: 回车键和编辑键
url: https://mangwu.github.io/uievents-cn/#ime; type: dfn; spec: uievents-code;
	text: IME
</pre>

<pre class="include">
path: stylesheet-extra.include
</pre>

<h2 id="introduction">简介</h2>

	本文档指定了一组有效的 [=键属性值=] 集合，它们 
	<span class="zh-upper">必须</span> 在 {{KeyboardEvent}} 事件的 
	{{KeyboardEvent/key}} 属性中使用，以对键的含义进行编码。
	请注意，特定键的 {{KeyboardEvent/key}} 值将根据用户当前的区域设置而有所不同。
	有关仅基于键在键盘上的物理位置而不因区域设置而变化的值，请参阅 
	[[!UIEvents-Code]] 中描述的 {{KeyboardEvent/code}} 。

	<h3 id="style-conventions">格式规约</h3>
		本规范遵循以下规约: 

		* 打印在 <em>[=键帽=]</em> 上的键显示为 KEYCAP{&darr;}， KEYCAP{=} 或 
			KEYCAP{Q} 。这用于从用户的角度引用键，而不考虑生成的 {{KeyboardEvent}} 
			事件中的 {{KeyboardEvent/key}} (键) 和 {{KeyboardEvent/code}} (键码)。

		* 代表字符的字形(Glyphs)显示为: GLYPH{a} ， 
			GLYPH{é} ， GLYPH{ر} ，  GLYPH{字} 。

		* Unicode( [[!Unicode]] )码点( [=code points=] ) 显示为: UNI{U+003D} 。

		* 有效的 [=键属性值=] ，即 {{KeyboardEvent}} 的 {{KeyboardEvent/key}} 
			属性值显示为: KEY{ArrowDown} ， KEY_NOLINK{=} ， KEY_NOLINK{q} 或 
			KEY_NOLINK{Q} 。

		* 有效的 [=按键码属性值=] ，即 {{KeyboardEvent}} 的 
			{{KeyboardEvent/code}} 属性值显示为: CODE{ArrowDown}，CODE{Equal} 或 
			CODE{KeyQ}。
		
		<p class="note custom-note">
		在 <a href="https://mangwu.github.io/uievents-cn/#style-conventions">
		UIEvents</a> 规范本体的格式规约中，也对键帽，字符，码点和键(key)，
		码(code)的属性值进行了说明，但是渲染显示不一样，本规范中的渲染会更显眼。
		</p>

		<div class="note custom-note" data-content='"键值"'>
		关于 <strong>"键值"</strong> 的说明: 
		键盘事件上包含两个与按下的物理按键有关的属性，一个是 {{KeyboardEvent/key}} 
		而一个是  {{KeyboardEvent/code}} ，在 [[UIEvents-key]] 中也经常出现 
		"键值"的说法，也就是按键的值，现在需要明确一点: <strong>"键值"表示的是 
		{{KeyboardEvent/key}} 的属性值</strong> ，在 [[UIEvents]] 
		系列规范中都是如此。如果在翻译时要指代 {{KeyboardEvent/code}} ，会说明成 
		<code>code</code> 值，键码值，按键码属性值等。
		</div>

<h2 id="key-attr-values">键盘事件 {{KeyboardEvent/key}} 属性值</h2>

	<dfn id="key-attribute-value">键属性值</dfn> 被定义为包含如下内容的一个
	<code>DOMString</code> :

	* 一个与用户键入的字符相对应的 [=键字符串=] ，同时考虑用户当前的区域设置、
		修饰符状态和任何有效的系统级键盘映射覆盖。

	* 由本文档中的表定义的一个 [=命名键属性值=] 。

	一个 [=键属性值=] <span class="zh-upper">必须</span> 
	始终包含属于这两个类别之一的值(即使该值为 KEY{Unidentified} )。

	键盘上的多个键可以生成相同的 [=键属性值=] 。例如，在一个 EN-US 键盘布局上，
	数字 [=小键盘=] 上的键(例如，小键盘 KEYCAP{1} 键)
	将生成与其非小键盘一对一(例如，键盘主要部分 [[=字母数字区域=]] 中的 KEYCAP{1} 
	键)相同的键属性值。 {{KeyboardEvent}} 的 {{KeyboardEvent/location}} 
	属性可用于确定按键是否源自数字 [=小键盘=] 。

	<h3 id="keys-unicode">Unicode 值</h3>

		几乎每个 Unicode 字符都可以用作有效字符 [=键属性值=] ， 
		但是有一小部分 Unicode 字符集合 <span class="zh-upper">不得</span> 使用。
		我们引入了 [=键字符串=] 的概念，以标识适合用作 [=键属性值=] 的 Unicode 
		字符集合。

		<dfn id="key-string">键字符串</dfn> (key string)是一个字符串，包含0个或1个 
		[=非控制字符=] ("基础"字符)，后跟0个或多个 [=组合字符=] 。字符串 
		<span class="zh-upper">必须</span> 采用规范化形式 C (Normalized Form C ，
		NFC)，如 [[!UAX15]] 中所述。
		
		<dfn id="non-control-character">非控制字符</dfn> (non-control character)
		是任何有效的 Unicode 字符，但排除那些属于"其他，控制(Other，Control)"
		("Cc")一般类别(General Category)的字符。

		<dfn id="combining-character">组合字符</dfn> (combining character)
		是"标记、间距组合(Mark，Spacing Combining)"("Mc")一般类别
		(General Category)中的，或具有非零组合类别(non-zero Combining 
		Class)的任何有效 Unicode 字符。

		<div class="note custom-note" id="key-string-note">
		这里对键字符串的定义基于对 Unicode 字符类别的认识，其中 "Other, Control" 是 
		Unicode 的一个字符类别，类别码为 [Cc] ，包含 65 个字符( 
		<a href="https://www.fileformat.info/info/unicode/category/Cc/list.htm">
		网络资料</a> 查阅得知); 而 "Mark ，Spacing Combining" 同样是 Unicode 
		的一个字符类别，类别码为 [Mc] ，包含 452 个字符( 
		<a href="https://www.fileformat.info/info/unicode/category/Mc/list.htm">
		网络资料</a> 查阅得知)。关于组合字符以及非零组合类别可以查阅 Unicode 
		标准的 <a href="https://www.unicode.org/versions/Unicode15.0.0/ch03.pdf">
		第3章</a> 。 <br/>
		总之，本节对于非控制字符，组合字符的定义是为了确定键字符串在 Unicode 
		中使用的字符范围以及字符串的组合形式。这样就保证了 [=键属性值=] 
		的字符串的确定性。
		</div>
		
		<div class="example">
			以下是一些简单 [=键字符串=] 的例子:
		
			* KEY_NOLINK{a}, KEY_NOLINK{A}, KEY_NOLINK{b}, KEY_NOLINK{B}, ...,
				KEY_NOLINK{å}, KEY_NOLINK{é}, KEY_NOLINK{ü}, KEY_NOLINK{ñ}
		
			* KEY_NOLINK{@}, KEY_NOLINK{%}, KEY_NOLINK{$}, KEY_NOLINK{*}, ...,
				KEY_NOLINK{0}, KEY_NOLINK{1}, KEY_NOLINK{2}
			
			* KEY_NOLINK{あ}, KEY_NOLINK{日}, KEY_NOLINK{中}, ...,
				KEY_NOLINK{一}, KEY_NOLINK{二}, KEY_NOLINK{三}

			* KEY_NOLINK{&#x0627;}, KEY_NOLINK{&#x0628;}, KEY_NOLINK{&#x0629;}, 
				KEY_NOLINK{&#x062A;}, ..., KEY_NOLINK{&#x0661;}, KEY_NOLINK{&#x0662;}, 
				KEY_NOLINK{&#x0663;}

			* KEY_NOLINK{&#x0430;}, KEY_NOLINK{&#x0431;}, KEY_NOLINK{&#x0432;}, 
				KEY_NOLINK{&#x0433;}
			
			* KEY_NOLINK{&#x00B1;}, KEY_NOLINK{&#x02B6;}, KEY_NOLINK{&#x03F6;}, 
				KEY_NOLINK{&#x0D79;}, KEY_NOLINK{&#x2109;}
		</div>

		<div class="example">
			除了 KEYCAP{Tab} 和 KEYCAP{Enter} (参见 [[#control]] )，所有非控制空白 
			Unicode 字符都被视为有效的 [=键字符串=] 。
			
			* KEY_NOLINK{&#x0020} = UNI{U+0020} 空格 (Space)

			* KEY_NOLINK{&#x00a0} = UNI{U+00A0} 无中断空格 (No-Break Space)
			
			* KEY_NOLINK{&#x2009} = UNI{U+2009} 细空格 (Thin Space)

			* KEY_NOLINK{&#x3000} = UNI{U+3000} 表意空格 (Ideographic Space)
		</div>

		<div class="note custom-note">
		空格的形式是多样的，在 Unicode 中有 "Separator, Space" 这一组字符类别( 
		<a href="https://www.fileformat.info/info/unicode/category/Zs/list.htm">
		网络资料</a> 查阅得知)，类别码为 [Zs] ，它包含 17 个字符，
		都是关于空格分隔符的，不同的空格符号有不同的宽度和用法，查阅维基百科 
		<a href="https://en.wikipedia.org/wiki/Whitespace_character">
		Whitespace_character</a> 获取更多信息，如下是空格字符宽度对比的图像:

		<figure id="figure-Punctuation-Spaces">
			<img src="images/Punctuation-Spaces.svg" width="363" height="450"
				alt="不同空格字符的宽度对比" />
			<div class="custom-figcaption">不同空格字符的宽度对比域</div>
		</figure>

		</div>
		

		<div class="example">
			以下是一些拥有 [=组合字符=] 的 [=键字符串=] 的例子: 
		
			* KEY_NOLINK{&#x00f4} = UNI{U+00F4}
				[ <span class="zh-upper">不是</span> (NOT) "o" + " &#x0302" (UNI{U+006F} 
				UNI{U+0302})，因为如果可以，则必须使用预组字符(pre-composed characters)]

			* KEY_NOLINK{&#x1e0d&#x0307} = UNI{U+1E0D} + UNI{U+0307}
				[ <span class="zh-upper">不是</span> (NOT) "d" + " &#x0323" + " &#x0307"
				(UNI{U+0064} UNI{U+0323} UNI{U+0307})，因为如果可用，
				则必须使用预组字符(pre-composed characters)，并且
				<span class="zh-upper">不是</span> (NOT) "&#x1e0b" + " &#x0323" 
				(UNI{U+1E0B} UNI{U+0323})，因为在用预组字符(pre-composed characters)
				替换之前必须对重音符号(accents)进行排序]
		</div>

		<div class="note custom-note" id="precomposed-char-note">
		<q>预组字符(precomposed character)是 Unicode 字符集中的实体，
		定义为一个或多字符序列。预组字符可以表示一个字母与一个附加符号，例如 
		GLYPH{é} (小写拉丁字母e带一个尖音符)。 技术上， GLYPH{é} (U+00E9)是一个字符，
		可以分解为 Unicode 等效字符串 GLYPH{e} (U+0065)与尖音符 " &#x0301"
		(U+0301)。</q> —— 维基百科 <a href="https://zh.wikipedia.org/wiki/预组字符">
		预组字符</a> <br/>
		这里给出了这些组合字符的具体 Unicode 编码，并对这些编码的合理性进行解释 ——
		不是简单的用单码字符拼接而成，而使用已有的预组字符。其中 
		KEY_NOLINK{&#x1e0d&#x0307} 的编码是用预组字符 GLYPH{ḍ} 和 单字符 
		" &#x0307" 组合而成，因为不存在这三个符号的预组字符，
		同时也说明了组合字符时，单字符排序的问题。<br/>
		以上非引用说法不一定准确，请参阅 [[!UAX15]] 标准以获取准确信息。
		</div>
		
		
		<h4 id="control">控制字符</h4>
		
			支持 Unicode "Cc" 一般类别(General Category)中的少量字符作为 
			[=命名键属性值=] 这些命名值如下所示:
			A small number of characters in the Unicode "Cc" General Category are
			supported as [=命名键属性值=]. These named values are as
			follows:
			
			* UNI{U+0008} KEY{Backspace}

			* UNI{U+0009} KEY{Tab}

			* UNI{U+000D} KEY{Enter}

			* UNI{U+001B} KEY{Escape}

			* UNI{U+007F} KEY{Delete}

			<div class="note custom-note">
			这里的 "Cc" 就是 "'Other, Control" Unicode 字符类别的类别码，
			查看键字符串的 <a href="#key-string-note">非标准注释</a> 以获取更多信息。
			</div>
			
		
	<h3 id="selecting-key-attribute-values">选择 {{KeyboardEvent/key}} 属性值</h3>

		<dfn id="glyph-modifier-key">字形修饰键</dfn> (glyph modifier key)
		是其中的任何一个修饰符键: KEYCAP{Shift}, KEYCAP{CapsLock} 或 KEYCAP{AltGr}。
		
		<div class="algorithm" data-algorithm="clipboard-read">
		<h4 id="h-clipboard-read">
		<dfn id="select-an-appropriate-key-attribute-value">
		选择一个适合的键属性值</dfn></h4>
		要 [=选择一个适合的键属性值=] 以保存在 {{KeyboardEvent}} 的 
		{{KeyboardEvent/key}} 属性中，请运行以下步骤: 

			1. 声明一个 DOMString 类型的 |key| 变量，初始化为 KEY{Unidentified} 。
			
			1. 如果对于这个按键事件，存在一个适合的 [=命名键属性值=] ，那么
				
				1. 赋值 |key| 为那个 [=命名键属性值=].

			1. 否则，如果按键事件生成了一个有效的 [=键字符串=] ，那么
			
				1. 赋值 |key| 为那个 [=键字符串=] 值.

			1. 否则，如果按键事件关联了除了 [=字形修饰键=] 之外的任何修饰符按键，那么

				1. 赋值 |key| 为 指定的 [=键字符串=] ，这个 [=键字符串=] 
					由按键事件生成，但保证在键入时的关联按键是 [=字形修饰键=] 
					之外的所有修饰符键。

			1. 将 |key| 作为此按键事件的 [=键属性值=] 返回。

			<p class="example">
				在标准的美国键盘上，按键键帽标签为 KEYCAP{Q} 的 [=键属性值=] 为 
				KEY_NOLINK{q} (如果同时按住 KEYCAP{Shift} [=字形修饰键=] ，则为 
				KEY_NOLINK{Q} )。
			</p>

			<div class="note custom-note">
			例子 4 中 [=键属性值=] 的结果 KEY_NOLINK{q} ，源于上面步骤的第 3 步。
			另外，这里配合 KEYCAP{Shift} 将键入字符 "q" 修饰成大写的，
			是在大写锁定状态是默认关闭的情况下(没有 [=字形修饰键=] KEYCAP{CapsLock} 
			的影响)。
			</div>
			
			<p class="example">
				在标准的美国键盘上， KEYCAP{Control} + KEYCAP{Q} 组合键的 [=键属性值=] 
				为 KEY_NOLINK{q} 。
			</p>

			<p class="example">
				在使用右手德沃夏克式键映射的美国键盘上，按键键帽标签为 KEYCAP{Q} 的
				[=键属性值=] 为 KEY_NOLINK{5} (如果同时按住 KEYCAP{Shift} [=字形修饰键=] 
				，则为 KEY_NOLINK{%} )。
			</p>

			<p class="example">
				在与前面的示例相同的德沃夏克式的美国键盘布局上，KEYCAP{Control} + 
				KEYCAP{Q} 组合键的 [=键属性值=] 为 KEY_NOLINK{5} 。
			</p>
			
			<div class="note custom-note">
			关于德沃夏克键盘，请参阅维基百科 
			<a href="https://en.wikipedia.org/wiki/Dvorak_keyboard_layout">
			Dvorak keyboard layout</a> 。
			</div>
			
			<p class="example">
				在一个 Bolnagri 式键盘布局上，按键键帽标签为 KEYCAP{Q} 的
				[=键属性值=] 是一个 包含单个 Unicode 字符 —— UNI{U+200C} 的字符串
				(显示为 ZWNJ 或零宽度断字符(Zero Width Non-Joining Space)) 
			</p>
			
			<div class="note custom-note">
			Bolnagri 是印地语的一种键盘布局。零宽度空格符 (zero-width space) 
			UNI{U+200B} : 用于较长单词的换行分隔; 零宽度断字符 (Zero-width non-joiner) 
			UNI{U+200C} : 用于阿拉伯文，德文，印度语系等文字中，
			阻止会发生连字的字符间的连字效果。查阅维基百科 
			<a href="https://en.wikipedia.org/wiki/Zero-width_non-joiner">
			Zero-width non-joiner</a> 以获取更多信息，
			如下是零宽度断字符在键盘上的显示: 
			
			<figure id="figure-Zero-width_non-joiner">
				<img src="images/Zero-width_non-joiner.svg" width="100" height="100"
				alt="零宽度断字符" />
				<div class="custom-figcaption">零宽度断字符</div>
			</figure>
			</div>
			

			<p class="example">
				在具有标准法语映射的法式 PC 键盘上， KEYCAP{^} 键充当组合扬抑音符的死键(
				[=dead key=] )。这个键盘事件的 [=键属性值=] 是 KEY{Dead} 。
			</p>

			<p class="example">
				同样在具有标准法语映射的法式键盘上，KEYCAP{é} 键(对应于美国键盘上的 
				KEYCAP{2} 键)的 [=键属性值=] 是 KEY_NOLINK{é} ( UNI{U+00E9} )。
			</p>

			<p class="example">
				在具有标准韩语映射的韩式 PC 键盘上， KEYCAP{Ha/En} 
				键的主要功能是在韩语和英语输入之间切换(输入模式切换)。
				这个按键有一个作为 [=命名键属性值=] 的记录，即 KEY{HangulMode} ，
				因此应将其用作 [=键属性值=] 。
			</p>

		</div>

	
<h2 id="named-key-attribute-values">命名 {{KeyboardEvent/key}} 属性值</h2>

	<dfn id="named-key-attribute-value">命名键属性值</dfn> 
	(named key attribute value) 是在本规范的本节中的任何一个表的 [=键属性值=] 
	列中给定的任何值。
	
	定义在这里的 [=命名键属性值=] 是部分基于 Java 平台(标准版6 API规范 
	[[KeyEventJava]] )的 <code>java.awt.event.KeyEvent</code> 接口、和 
	Microsoft.NET Framework 4.0 Class Library [[KeysNet]] 中的按键枚举
	(<code>System.Windows.Forms.Keys</code>) 的键码集(keycodes)。
	本规范中的其他信息来自 Microsoft 的 WM_APPCOMMAND messages [[WmAppCommand]] ，
	以及本文档中提到的其他更专业的规范。

	{{KeyboardEvent}} 接口的一个符合规范的实现 <span class="zh-upper">必须</span> 
	支持在 {{KeyboardEvent/key}} 属性中使用的这组值，
	但是并非所有值都可以在所有平台或设备上使用。

	本规范的未来版本可能将新增的 {{KeyboardEvent/key}} 值包含此处，
	这些键值是那些自本规范发布以来(在实现中)又变得很常见的键值。

	<p class="note">
	注意：虽然已经尽一切努力使该值列表尽可能完整，但随着新输入设备的引入，
	需要定期定义新值。与其允许用户代理定义自己的 [=命名键属性值=] 
	(这些属性值很难在多个用户代理机构之间统一)， 
	<span class="zh-upper">应当</span> 提供一种归档方法来更新这个规范， 
	以便可以检测到这些漏洞(bugs)。
	</p>

	<h3 id="tranlate-supply" 
	class="no-ref no-num heading settled">3.0. 翻译说明</h3>

		按键的 <code>key</code> 属性值集合不像按键码(code)值，
		它不与物理按键一一对应，修饰键可能改变这些按键的键值，要对应的设备繁多，
		一个按键可能拥有多个键值，所以在翻译时难免理解不清楚，
		特别是有关多媒体，媒体控制器，电视按键的键值部分。
		而且本规定定义的很多键值来源于其它电子设备技术规范，
		这进一步增加了它的翻译难度，
		故而在后半部分的许多按键的典型用途列中使用机器翻译，
		但是 <strong>会在键值名称后加上原始的英文按键名称</strong> ，例如，
		"模拟地面流传(Analog Terrestrial)"，"切换到部件输入(component input) #1"等。

	<h3 id="keys-special">特殊按键</h3>

		如果遇到一个无法识别的按键，实现必须 <span class="zh-upper">必须</span> 使用
		KEY{Unidentified} 作为 [=键属性值=] 。

		BEGIN_KEY_TABLE general
			KEY Unidentified	当一个实现由于硬件、平台或软件限制而无法识别另一个键值时
								，会使用此键值。
		END_KEY_TABLE

		<p class="note">
		当实现无法确定 [=键属性值=] 时，符合本规范的实现 
		<span class="zh-upper">必须</span> 只能使用 KEY{Unidentified} 作为键属性值。
		但仅使用(Exposing)该值 <span class="zh-upper">不得</span> 
		表明实现符合本规范。
		</p>

	<h3 id="keys-modifier">修饰键</h3>

		BEGIN_KEY_TABLE modifier
			KEY Alt				KEYCAP{Alt} (Alternative，转换)键。<br/>
								此键启用转换修饰符功能，用于解译(interpreting)
								并行或连续的键盘输入。<br/>
								此键值也见于苹果的 KEYCAP{Option} 键。<br/>
			KEY AltGraph		转换字形(Alternate Graphics， KEYCAP{AltGr} 或 
								KEYCAP{AltGraph} )键。此键用于启用 ISO 3 级上档(shift)修饰符功能
								(标准 KEYCAP{Shift} 键是级别 2 的修饰键)。参见 [[ISO9995-1]] 。
			KEY CapsLock		KEYCAP{Caps Lock} (大写锁定)键。触发(Toggle)
								大写字符锁定功能以解译(interpreting)后续键盘输入事件。
			KEY Control			KEYCAP{Control} 或 KEYCAP{Ctrl} 键，
								此键启用控制修饰符功能，用于解译(interpreting)
								并行或连续的键盘输入。
			KEY_OPT Fn			功能(Function)开关 KEYCAP{Fn} 键。<br/>
								与另一个 [=功能键=] 同时激活该键会将 [=功能键=] 
								的键值更改为备用字符(alternate character)或其他功能。<br/>
								KEYCAP{Fn} 键通常在键盘硬件中直接处理，并且通常不生成按键事件。
			KEY_OPT FnLock		功能锁定( KEYCAP{FnLock} 或 KEYCAP{F-Lock} )键。
								激活此键可切换键盘模式，将 [=功能键=] 的值更改为备用字符
								(alternate character)或其他功能。 KEYCAP{FnLock} 
								通常在键盘硬件中直接处理，并且通常不生成键事件。
			KEY Meta			KEYCAP{Meta} 键，此键启用变换修饰符功能，以解译
								(interpreting)并行或连续的键盘输入。此键值用于 <q>Windows 
								徽标</q> 键和苹果的 KEYCAP{Command} 或 KEYCAP{&#x2318;} 键。
			KEY NumLock			KEYCAP{NumLock} 或数字锁定(Number Lock)键，用于触发 
								[=小键盘=] 的功能模式，以解译(interpreting)连续的键盘输入。
			KEY ScrollLock		KEYCAP{Scroll Lock} (滚动锁定)键，
								用于在滚动和光标移动模式之间切换。
			KEY Shift			KEYCAP{Shift} 键，此键启用上档(shift)修饰符功能，以解译
								(interpreting)并行或连续的键盘输入。
			KEY_OPT Symbol		符号(Symbol)修饰符键(用于某些虚拟键盘)。
			KEY_OPT SymbolLock	符号锁定(Symbol Lock)键。
		END_KEY_TABLE

		遗留修饰键:

		BEGIN_KEY_TABLE modifier-legacy
			KEY_OPT Hyper		KEYCAP{Hyper} 键。
			KEY_OPT Super		KEYCAP{Super} 键.
		END_KEY_TABLE

	<h3 id="keys-whitespace">空格键</h3>

		BEGIN_KEY_TABLE whitespace
			KEY Enter	KEYCAP{Enter} 或 KEYCAP{&crarr;} 键，
						用于激活当前选择或接受当前输入。<br/>
						此键值也用做 KEYCAP{Return} (在 Macintosh [=数字板=] 上)键。<br/>
						此键值也用做 Android KEYCODE_DPAD_CENTER。
			KEY Tab		水平制表(Horizontal Tabulation) KEYCAP{Tab} 键。
		END_KEY_TABLE

		<p class="note">空格或空格键编码为 KEY_NOLINK{&nbsp;} 。</p>

	<h3 id="keys-navigation">导航按键</h3>

		BEGIN_KEY_TABLE navigation
			KEY ArrowDown	下箭头键，用于向下导航或遍历。(KEYCODE_DPAD_DOWN)
			KEY ArrowLeft	左箭头键，用于向左导航或遍历。(KEYCODE_DPAD_LEFT)
			KEY ArrowRight	右箭头键，用于向右导航或遍历。(KEYCODE_DPAD_RIGHT)
			KEY ArrowUp		上箭头键，用于向上导航或遍历。(KEYCODE_DPAD_UP)
			KEY End			结束(End)键，配合键盘输入使用，用于跳转到输入内容的末尾 
							(KEYCODE_MOVE_END)。
			KEY Home		起始(Home)键，配合键盘输入使用，用于跳转到输入内容的开头 
							(KEYCODE_MOVE_HOME)。<br/> 对于手机 KEYCAP{Home} 键
							(用于进入手机主屏幕)，请使用 KEY{GoHome} 。
			KEY PageDown	向下翻页(Page Down)键，向下滚动或显示下一页内容。
			KEY PageUp		向上翻页(Page Up)键, 向上滚动或显示上一页内容。
		END_KEY_TABLE

	<h3 id="keys-editing">编辑键</h3>

		BEGIN_KEY_TABLE editing
			KEY Backspace		回退(Backspace)键。在 MacOS 键盘上，
								该键值也对应的按键键帽标签为 KEYCAP{Delete} 。
			KEY_OPT Clear		删除当前选定的输入。
			KEY_OPT Copy		复制当前选择对象。 (APPCOMMAND_COPY)
			KEY_OPT CrSel		光标选择(Cursor Select (Crsel))键。
			KEY_OPT Cut			剪切当前选择对象。 (APPCOMMAND_CUT)
			KEY Delete			删除(Delete (Del))键。
								当被 KEYCAP{Fn} 键修饰时，在 MacOS 键盘上，
								该键值对应的按键键帽标签为 KEYCAP{Delete} 。
								<div class="note custom-note">
								在 MacOS 键盘上，其键帽为 KEYCAP{Backspace} 和 KEYCAP{Delete} 
								的按键的键值分别为 KEY{Delete} 和 KEY{Backspace} 
								(和标准美式键盘正好相反)，类似地，按键的 <code>code</code> 
								值也是相反的，分别为 CODE{Delete} 和 CODE{Backspace} (见 
								[[!UIEvents-Code]] )。此处将 KEYCAP{Fn} 键引入，
								说明键值是可以被修饰符修改的(而 <code>code</code> 值不会)，
								并且在 MacOS 中，将 KEYCAP{Delete} 原初的 KEY{Backspace} 
								键值修改成了 KEY{Delete} 。
								</div>
								
			KEY_OPT EraseEof	擦除到字段末尾(Erase to End of Field)键。 
								该键删除从当前光标位置到当前字段末尾的所有字符。 
			KEY_OPT ExSel		展开所选内容(Extend Selection (Exsel))键。
			KEY Insert			插入(Insert (Ins))键, 在文本模式之间切换以进行插入或覆写
								(KEYCODE_INSERT)。 <div class="note custom-note">
								详见 [=回车键和编辑键=] 中的插入键。
								</div>
								
			KEY_OPT Paste		粘贴(Paste)键。 (APPCOMMAND_PASTE)
			KEY_OPT Redo		重做上一个操作。 (APPCOMMAND_REDO)
			KEY_OPT Undo		撤消上一个操作。 (APPCOMMAND_UNDO)
		END_KEY_TABLE

	<h3 id="keys-ui">UI(用户界面)按键</h3>

		BEGIN_KEY_TABLE ui
			KEY_OPT Accept		接收(Accept，Commit，OK，提交，确定)键。 
								接收当前选项结果或接收当前输入法下序列的转换结果。
			KEY_OPT Again			再次(Again)键，重做或重复一个动作。
			KEY_OPT Attn			注意(Attention，Attn)键。
			KEY_OPT Cancel		取消(Cancel)键。
			KEY ContextMenu		显示应用程序的上下文菜单。该键通常位于右侧 KEYCAP{Meta} 
								键和右侧 KEYCAP{Control} 键之间。
			KEY Escape				KEYCAP{Esc} 键。该键最初用于生成转义字符(Escape 
								character)序列，但现在更常用于退出或"逃离"当前上下文，
								例如关闭对话框或退出全屏模式。
			KEY_OPT Execute		执行(Execute)键。
			KEY_OPT Find			打开"查找(Find)"对话框。(APPCOMMAND_FIND)
			KEY Help					打开帮助对话框或切换帮助信息的显示(display)。
								(APPCOMMAND_HELP, KEYCODE_HELP)
			KEY Pause					暂停当前状态或应用程序(视情况而定)。
								<p class="note">
								不要将此值用于媒体控制器(media controller)上的 KEYCAP{Pause} 
								按钮。如果想要用媒体暂停，请改用 KEY{MediaPause} 。</p>
			KEY_OPT Play			继续或恢复当前状态或应用程序(视情况而定)。
								<p class="note">
								不要将此值用于媒体控制器(media controller)上的 KEYCAP{Play} 
								按钮。如果想要用媒体暂停，请改用 KEY{MediaPlay} 。</p>
			KEY_OPT Props			属性(properties ，Props)键。
			KEY_OPT Select		选择(Select)键。
			KEY_OPT ZoomIn		放大(ZoomIn)键。(KEYCODE_ZOOM_IN)
			KEY_OPT ZoomOut		缩小(ZoomOut)键。(KEYCODE_ZOOM_OUT)
		END_KEY_TABLE

	<h3 id="keys-device">设备(Device)按键</h3>

		BEGIN_KEY_TABLE device
			KEY_OPT BrightnessDown	降低亮度(Brightness Down)键。 
									通常用于控制显示器的亮度。 (KEYCODE_BRIGHTNESS_DOWN)
			KEY_OPT BrightnessUp		提高亮度(Brightness Up)键。 
									通常用于控制显示器的亮度。 (KEYCODE_BRIGHTNESS_UP)
			KEY_OPT Eject						将可移动媒介(removable media)切换到弹出
									(打开)和插入(关闭)状态。(KEYCODE_MEDIA_EJECT)
			KEY_OPT LogOff					注销(LogOff)键。
			KEY_OPT Power						切换电源状态(电源开关)。(KEYCODE_POWER)
									<p class="note">
									注意: 某些设备可能不会将此键暴露给操作环境。</p>
			KEY_OPT PowerOff		KEYCAP{PowerOff} 键。 有时候键帽标签也是
									KEYCAP{PowerDown} 。
			KEY PrintScreen			KEYCAP{Print Screen} 或 KEYCAP{SnapShot} (截屏)键， 
									启动屏幕打印的功能。
			KEY_OPT Hibernate		睡眠(Hibernate)键。此键将计算机的当前状态保存到磁盘，
									以便(之后开机时)对其进行恢复。在这之后计算机会停止工作。
			KEY_OPT Standby			待机(Standby)键。
									此键可关闭显示器并将计算机置于低功耗模式，
									但计算机不会完全停止工作。有时改键值对应的键帽标签为 
									KEYCAP{Suspend} 或 KEYCAP{Sleep} 键。(KEYCODE_SLEEP)
			KEY_OPT WakeUp			唤醒(WakeUp)键。 (KEYCODE_WAKEUP)
		END_KEY_TABLE

	<h3 id="keys-composition">输入法和组合(IME and Composition)键</h3>

		<div class="note custom-note">
		IME 全称 Input Method Editor ，即输入法编辑器，
		是指键盘击键或鼠标移动翻译成字符来输入的操作系统组件，见 [[UIEvents]] 的 
		[=IME=] 获取更多信息。
		</div>

		BEGIN_KEY_TABLE composition
			KEY_OPT AllCandidates	所有候选(All Candidates)键，用于启动多候选模式。
			KEY_OPT Alphanumeric	字母数字(Alphanumeric)键。
			KEY_OPT CodeInput		码元输入(Code Input)键，用于启动"码元输入"模式，
									以允许通过字符的码点(code points)输入字符。
			KEY_OPT Compose			组合(Compose)键，在 X Window 系统上也称为 
									<em>Multi_key</em>。该键的作用方式类似于死键( [=dead key=] )，
									切换到一种模式，在该模式下，
									随后的按键输入组合在一起产生一个不同的字符。
									<div class="note custom-note">
									实际上就是生成了预组字符(precomposed character)，参见 例子 3 
									的 <a href="#precomposed-char-note">非规范注释</a> 。
									</div>
			KEY_OPT Convert			KEYCAP{変換} (Convert)键，用于转换当前输入法下的序列。
									<div class="note custom-note">
									KEYCAP{変換} 属于日式标准 "106" 键盘布局上的按键，查阅 
									CODE{Convert} 以获取更多信息。
									</div>
									
			KEY_OPT Dead			一个死键组合(dead key combining)键。
									它可以是任何键盘布局中的任何组合键。例如，在使用法语映射的
									PC/AT 法语键盘上，如果没有激活(activiated)任何修饰键，
									该键的键值是 UNI{U+0302} 组合扬抑音符(COMBINING CIRCUMFLEX 
									ACCENT)。在另一种布局中，这可能是不同的 unicode 组合键。<br/>
									对于需要区分特定组合字符的应用程序，关联的 
									[=compositionupdate=] 事件的 {{CompositionEvent/data}} 
									属性提供特定的键值。
			KEY_OPT FinalMode		一些亚洲键盘上使用最终模式(Final Mode KEYCAP{Final} 
									)键，用于启用 [=IMEs=] 的最终模式。
			KEY_OPT GroupFirst		切换到第一个字符组。(ISO/IEC 9995)
			KEY_OPT GroupLast		切换到最后一个字符组。(ISO/IEC 9995)
			KEY_OPT GroupNext		切换到下一个字符组。(ISO/IEC 9995)
			KEY_OPT GroupPrevious	切换到上一个字符组。(ISO/IEC 9995)
			KEY_OPT ModeChange		模式切换(Mode Change)键，以在 [=IMEs=] 
									不同的输入模式之间循环切换。
			KEY_OPT NextCandidate	下一个候选功能(Next Candidate function)键。
			KEY_OPT NonConvert		KEYCAP{無変換} (NonConvert ，即"不变换") 键，
									用于接收当前输入法下的在 [=IMEs=] 中不转换(without conversion)
									的序列结果。 <div class="note custom-note">
									KEYCAP{無変換} 属于日式标准 "106" 键盘布局上的按键，查阅 
									CODE{NonConvert} 以获取更多信息。
									</div>
									
			KEY_OPT PreviousCandidate	上一个候选功能(Previous Candidate function)键。
			KEY_OPT Process			步骤(Process)键。
			KEY_OPT SingleCandidate	单一候选功能(Single Candidate function)键。
		END_KEY_TABLE

		韩语键盘专用键: 

		BEGIN_KEY_TABLE ime-korean
			KEY_OPT HangulMode	韩语(Hangul，Korean characters，朝鲜语字符)模式键，
									用于在韩语和英语输入模式之间切换。
			KEY_OPT HanjaMode	朝鲜汉字 (Korean characters) 模式键。
			KEY_OPT JunjaMode	Junja (Korean characters) 模式键。
		END_KEY_TABLE

		日语键盘专用键: 

		BEGIN_KEY_TABLE ime-japanese
			KEY_OPT Eisu			KEYCAP{英数} (Eisu)键。 此键可以关闭输入法
									(转为英文字母输入)，但其用途由当前输入法定义。(KEYCODE_EISU)
			KEY_OPT Hankaku			半角字符(Hankaku，Half-Width Characters)键。
			KEY_OPT Hiragana		平假名(Hiragana) (日语假名字符，Japanese Kana 
									characters)键。
			KEY_OPT HiraganaKatakana	平假名/片假名(Hiragana/Katakan)切换键。 
									(KEYCODE_KATAKANA_HIRAGANA)
			KEY_OPT KanaMode		假名模式(假名锁定，Kana Lock)键。 
									此键用于进入平假名模式(通常是从罗马字模式切换来)
			KEY_OPT KanjiMode		汉字(Kanji) (中文表意文字的日文名称)模式键。
									此键通常用于切换到平假名键盘，
									以便将输入转换为汉字。(KEYCODE_KANA)
			KEY_OPT Katakana		片假名(Katakana) (日语假名字符)键。
			KEY_OPT Romaji			罗马字符功能(Roman characters function)键。
			KEY_OPT Zenkaku			全角字符(Zenkaku ，Full-Width Characters)键。
			KEY_OPT ZenkakuHankaku	半/全角切换(Zenkaku/Hankaku 
									(full-width/half-width) toggle)键。 (KEYCODE_ZENKAKU_HANKAKU)
		END_KEY_TABLE

	<h3 id="keys-function">通用功能键</h3>

		每个平台上的通用功能键(general purpose function keys)的准确数量都不相同，
		这里只明确定义了前几个。通过在功能键名称末尾增加以10为基数的索引，
		可以隐式地定义其他功能键名称。例如， KEY_NOLINK{F24} 和 KEY_NOLINK{Soft8} 
		都是有效的键值。

		BEGIN_KEY_TABLE function
			KEY F1		F1 键，一个通用功能键，索引为 1
			KEY F2		F2 键，一个通用功能键，索引为 2
			KEY F3		F3 键，一个通用功能键，索引为 3
			KEY F4		F4 键，一个通用功能键，索引为 4
			KEY F5		F5 键，一个通用功能键，索引为 5
			KEY F6		F6 键，一个通用功能键，索引为 6
			KEY F7		F7 键，一个通用功能键，索引为 7
			KEY F8		F8 键，一个通用功能键，索引为 8
			KEY F9		F9 键，一个通用功能键，索引为 9
			KEY F10		F10 键，一个通用功能键，索引为 10
			KEY F11		F11 键，一个通用功能键，索引为 11
			KEY F12		F12 键，一个通用功能键，索引为 12
			KEY_OPT 	Soft1 通用虚拟功能键，索引为 1。
			KEY_OPT 	Soft2 通用虚拟功能键，索引为 2。
			KEY_OPT 	Soft3 通用虚拟功能键，索引为 3。
			KEY_OPT 	Soft4 通用虚拟功能键，索引为 4。
		END_KEY_TABLE

	<h3 id="keys-multimedia">多媒体按键</h3>

		多媒体按键(multimedia keys)是"多媒体"键盘上的额外按键。

		BEGIN_KEY_TABLE multimedia
			KEY_OPT ChannelDown		选择下一个(数字上地或逻辑上地)较低的频道。
									(APPCOMMAND_MEDIA_CHANNEL_DOWN, KEYCODE_CHANNEL_DOWN)
			KEY_OPT ChannelUp			选择下一个(数字上地或逻辑上地)较高的频道。 
									(APPCOMMAND_MEDIA_CHANNEL_UP, KEYCODE_CHANNEL_UP)
			KEY_OPT Close					关闭当前文档或邮件(message，下面翻译都用"邮件")
									(注意: 这不会关闭应用程序)。(APPCOMMAND_CLOSE)
			KEY_OPT MailForward		打开编辑器以转发当前邮件。(APPCOMMAND_FORWARD_MAIL)
			KEY_OPT MailReply		打开编辑器以回复当前邮件。(APPCOMMAND_REPLY_TO_MAIL)
			KEY_OPT MailSend		发送当前邮件。(APPCOMMAND_SEND_MAIL)
			KEY_OPT MediaClose		关闭当前媒体，例如关闭 CD 或 DVD 托盘。
									(KEYCODE_MEDIA_CLOSE)
			KEY_OPT MediaFastForward	以比正常速度更快的速度启动或继续向前播放媒体，
									如果已经快进，则增加播放速度。
									(APPCOMMAND_MEDIA_FAST_FORWARD, KEYCODE_MEDIA_FAST_FORWARD)
			KEY_OPT MediaPause				暂停当前播放的媒体。
									(APPCOMMAND_MEDIA_PAUSE, KEYCODE_MEDIA_PAUSE)
									<p class="note">媒体控制器设备的暂停键应使用此值，而不是 
									KEY{Pause}。</p>
			KEY_OPT MediaPlay					如果当前未以正常速度播放，
									则以正常速度启动或继续播放媒体。
									(APPCOMMAND_MEDIA_PLAY, KEYCODE_MEDIA_PLAY)
			KEY_OPT MediaPlayPause		在媒体的播放和暂停状态之间切换。
									(APPCOMMAND_MEDIA_PLAY_PAUSE, KEYCODE_MEDIA_PLAY_PAUSE)
			KEY_OPT MediaRecord				启动或恢复当前所选媒体的录制。
									(APPCOMMAND_MEDIA_RECORD, KEYCODE_MEDIA_RECORD)
			KEY_OPT MediaRewind				以比正常速度更快的速度启动或继续回退(reverse)
									播放媒体，如果已经回退，则提高回退速度。
									(APPCOMMAND_MEDIA_REWIND, KEYCODE_MEDIA_REWIND)
			KEY_OPT MediaStop					停止播放、暂停、快进、回退或录制媒体
									(如果尚未停止)。(APPCOMMAND_MEDIA_STOP, KEYCODE_MEDIA_STOP)
			KEY_OPT MediaTrackNext		查找下一个媒体或节目(program track)。
									(APPCOMMAND_MEDIA_NEXTTRACK, KEYCODE_MEDIA_NEXT)
			KEY_OPT MediaTrackPrevious	查找上一个媒体或节目(program track)。
									(APPCOMMAND_MEDIA_PREVIOUSTRACK, KEYCODE_MEDIA_PREVIOUS)
			KEY_OPT New				打开新文档或邮件。(APPCOMMAND_NEW)
			KEY_OPT Open			打开现有文档或邮件。(APPCOMMAND_OPEN)
			KEY_OPT Print			打印当前文档或邮件。(APPCOMMAND_PRINT)
			KEY_OPT Save			保存当前文档或邮件。(APPCOMMAND_SAVE)
			KEY_OPT SpellCheck		拼写检查当前文档或所选内容。(APPCOMMAND_SPELL_CHECK)
		END_KEY_TABLE

	<h3 id="keys-multimedia-numpad">多媒体数字键盘键</h3>

		正常的 KEYCAP{0} ... KEYCAP{9} 数字键盘键被编码为 KEY_NOLINK{0} ... 
		KEY_NOLINK{9} ，但有些多媒体键盘的按键(buttons)以 KEYCAP{1} ... KEYCAP{12} 
		形式编号。在这些情况下， KEYCAP{10} 键的键帽通常为 KEYCAP{10 /0} 。

		<p class="note">
		注意: 如果设备支持，则键帽标签为 KEYCAP{10} 或 KEYCAP{10 /0} 的键 
		<span class="zh-upper">必须</span>  分配一个 KEY_NOLINK{0} 的 
		{{KeyboardEvent/key}} 值。
		</p>

		BEGIN_KEY_TABLE multimedia-numpad
			KEY_OPT Key11	出现在媒体数字键盘上的 KEYCAP{11} 键，数字键盘上海包含有 
							KEYCAP{1} ... KEYCAP{12} 按键(buttons)。
			KEY_OPT 			出现在媒体数字键盘上的 KEYCAP{12} 键，数字键盘上海包含有 
							KEYCAP{1} ... KEYCAP{12} 按键(buttons)。
		END_KEY_TABLE

	<h3 id="keys-audio">音频键</h3>

		与音频相关的多媒体键。

		BEGIN_KEY_TABLE audio
			KEY_OPT AudioBalanceLeft			向左调整音量平衡(audio balance)。
									(VK_AUDIO_BALANCE_LEFT)
			KEY_OPT AudioBalanceRight			向右调整音量平衡(audio balance)。 
									(VK_AUDIO_BALANCE_RIGHT)
			KEY_OPT AudioBassBoostDown		降低音频的低音增强(bass boost)
									效果或在低音增强状态之间循环下降(cycle down)。
									(APPCOMMAND_BASS_DOWN, VK_BASS_BOOST_DOWN)
			KEY_OPT AudioBassBoostToggle	打开/关闭低音增强(bass boost)。 
									(APPCOMMAND_BASS_BOOST)
			KEY_OPT AudioBassBoostUp			增加音频的低音增强(bass boost)
									效果或在低音增强状态之间循环上升(cycle up)。 
									(APPCOMMAND_BASS_UP, VK_BASS_BOOST_UP)
			KEY_OPT AudioFaderFront				向前调整音频音量控制器(audio fader)。
									(VK_FADER_FRONT)
			KEY_OPT AudioFaderRear				向后调整音频音量控制器(audio fader)。
									(VK_FADER_REAR)
			KEY_OPT AudioSurroundModeNext	将环绕立体声模式升级成下一个
									(如果存在更高级的模式的话)。(VK_SURROUND_MODE_NEXT)
			KEY_OPT AudioTrebleDown				降低高音(treble)。 (APPCOMMAND_TREBLE_DOWN)
			KEY_OPT AudioTrebleUp			增加高音(treble)。 (APPCOMMAND_TREBLE_UP)
			KEY_OPT AudioVolumeDown				降低音频音量(audio volume)。
									(APPCOMMAND_VOLUME_DOWN, KEYCODE_VOLUME_DOWN)
			KEY_OPT AudioVolumeUp					增加音频音量(audio volume)。
									(APPCOMMAND_VOLUME_UP, KEYCODE_VOLUME_UP)
			KEY_OPT AudioVolumeMute				在静音状态和先前音量水平(prior volume level)
									之间进行切换。(APPCOMMAND_VOLUME_MUTE, KEYCODE_VOLUME_MUTE)
			KEY_OPT MicrophoneToggle			打开/关闭麦克风。
									(APPCOMMAND_MIC_ON_OFF_TOGGLE)
			KEY_OPT MicrophoneVolumeDown	降低麦克风音量。
									(APPCOMMAND_MICROPHONE_VOLUME_DOWN)
			KEY_OPT MicrophoneVolumeUp		升高麦克风音量。
									(APPCOMMAND_MICROPHONE_VOLUME_UP)
			KEY_OPT MicrophoneVolumeMute	将麦克风静音。
									(APPCOMMAND_MICROPHONE_VOLUME_MUTE, KEYCODE_MUTE)
		END_KEY_TABLE

	<h3 id="keys-speech">语音键</h3>

		与语音识别(speech recognition)相关的多媒体按键。

		BEGIN_KEY_TABLE speech
			KEY_OPT SpeechCorrectionList	当单词被错误识别时，显示更正列表。
									(APPCOMMAND_CORRECTION_LIST)
			KEY_OPT SpeechInputToggle			在听写模式(dictation mode)和命令/控制模式
									(command/control mode)之间切换。
									(APPCOMMAND_DICTATE_OR_COMMAND_CONTROL_TOGGLE)
		END_KEY_TABLE

	<h3 id="keys-apps">应用程序键</h3>

		应用程序按键(Application Keys)是用于启动特定应用程序的特殊按键。
		通过将"启动(Launch)"与应用程序的名称连接起来，
		可以定义附加的应用程序按键名称。

		BEGIN_KEY_TABLE apps
			KEY_OPT LaunchApplication1	第一个通用的"LaunchApplication"键。
								该按键通常与启动"我的电脑(My Computer)"有关，
								并且可能在键帽上有一个电脑符号。(APPCOMMAND_LAUNCH_APP1)
			KEY_OPT LaunchApplication2	第二个通用的"LaunchApplication"键。
								该按键通常与启动"计算器(LaunchApplication)"有关，
								并且可能在键帽上有一个计算器符号。
								(APPCOMMAND_LAUNCH_APP2, KEYCODE_CALCULATOR)
			KEY_OPT LaunchCalendar			日历("Calendar")键。 (KEYCODE_CALENDAR)
			KEY_OPT LaunchContacts			联系人("Contacts")键。 (KEYCODE_CONTACTS)
			KEY_OPT LaunchMail					邮箱("Mail")键。 (APPCOMMAND_LAUNCH_MAIL)
			KEY_OPT LaunchMediaPlayer		媒体播放器("Media Player")键。 
								(APPCOMMAND_LAUNCH_MEDIA_SELECT)
			KEY_OPT LaunchMusicPlayer		音乐播放器("Music Player")键。
			KEY_OPT LaunchPhone					电话("Phone")键。
			KEY_OPT LaunchScreenSaver		屏幕保护程序("Screen Saver")键。
			KEY_OPT LaunchSpreadsheet		电子表格("Spreadsheet")键。
			KEY_OPT LaunchWebBrowser		Web 浏览器("Web Browser")键。
			KEY_OPT LaunchWebCam				网络摄像头("WebCam")键。
			KEY_OPT LaunchWordProcessor	文字处理器("Word Processor")键。
		END_KEY_TABLE

	<h3 id="keys-browser">浏览器键</h3>

		BEGIN_KEY_TABLE browser
			KEY_OPT BrowserBack				导航到当前历史记录中的上一个内容或页面。
								(APPCOMMAND_BROWSER_BACKWARD)
			KEY_OPT BrowserFavorites	打开浏览器收藏夹列表。 
								(APPCOMMAND_BROWSER_FAVORITES)
			KEY_OPT BrowserForward		导航到当前历史记录中的下一个内容或页面。
								(APPCOMMAND_BROWSER_FORWARD)
			KEY_OPT BrowserHome				跳转到用户的首选(自定义)主页。
								(APPCOMMAND_BROWSER_HOME)
			KEY_OPT BrowserRefresh		刷新当前页面或内容。(APPCOMMAND_BROWSER_REFRESH)
			KEY_OPT BrowserSearch			调出用户的首选搜索页面。
								(APPCOMMAND_BROWSER_SEARCH)
			KEY_OPT BrowserStop				停止加载当前页面或内容。
								(APPCOMMAND_BROWSER_STOP)
		END_KEY_TABLE

	<h3 id="keys-mobile">移动电话按键</h3>

		BEGIN_KEY_TABLE mobile-phone
			KEY_OPT AppSwitch		应用程序转换(Application switch)键，
								它提供了一个可在其中进行切换的最近应用程序的列表。
								(KEYCODE_APP_SWITCH)
			KEY_OPT Call				呼叫(Call)键。 (KEYCODE_CALL)
			KEY_OPT Camera			相机(Camera)键。 (KEYCODE_CAMERA)
			KEY_OPT CameraFocus	摄像头焦点(Camera focus)键。 (KEYCODE_FOCUS)
			KEY_OPT EndCall			结束通话(End Call)键。 (KEYCODE_ENDCALL)
			KEY_OPT GoBack			返回(Back)键。 (KEYCODE_BACK)
			KEY_OPT GoHome			Home 键，用于进入手机的主屏幕. (KEYCODE_HOME)
			KEY_OPT HeadsetHook		耳机挂钩(Headset Hook)键。 (KEYCODE_HEADSETHOOK)
			KEY_OPT LastNumberRedial	重拨(Last Number Redial)键。
			KEY_OPT Notification	通知(Notification)键。 (KEYCODE_NOTIFICATION)
			KEY_OPT MannerMode		切换(铃声的)模式状态: 静音、振动、响铃...
								(KEYCODE_MANNER_MODE)
			KEY_OPT VoiceDial		语音拨号(Voice Dial)键。
		END_KEY_TABLE

	<h3 id="keys-tv">电视(TV)按键</h3>

		BEGIN_KEY_TABLE tv
			KEY_OPT TV												观看电视开关。(KEYCODE_TV)
			KEY_OPT TV3DMode									电视 3D 模式。 (KEYCODE_3D_MODE)
			KEY_OPT TVAntennaCable						在天线和电缆输入之间切换(接收源)。 
								(KEYCODE_TV_ANTENNA_CABLE)
			KEY_OPT TVAudioDescription				音频描述。(KEYCODE_TV_AUDIO_DESCRIPTION)
			KEY_OPT TVAudioDescriptionMixDown	音频描述降低音量。 
								(KEYCODE_TV_AUDIO_DESCRIPTION_MIX_DOWN)
			KEY_OPT TVAudioDescriptionMixUp		音频描述提高音量。 
								(KEYCODE_TV_AUDIO_DESCRIPTION_MIX_UP)
			KEY_OPT TVContentsMenu						内容菜单。 (KEYCODE_TV_CONTENTS_MENU)
			KEY_OPT TVDataService							内容菜单. (KEYCODE_TV_DATA_SERVICE)
			KEY_OPT TVInput										在外部电视(external TV)上切换输入模式。 
								(KEYCODE_TV_INPUT)
			KEY_OPT TVInputComponent1					切换到部件输入(component input) #1。
								(KEYCODE_TV_INPUT_COMPONENT_1)
			KEY_OPT TVInputComponent2					切换到部件输入(component input) #2。
								(KEYCODE_TV_INPUT_COMPONENT_2)
			KEY_OPT TVInputComposite1					切换到复合输入(composite input) #1。
								(KEYCODE_TV_INPUT_COMPOSITE_1)
			KEY_OPT TVInputComposite2					切换到复合输入(composite input) #2。
								(KEYCODE_TV_INPUT_COMPOSITE_2)
			KEY_OPT TVInputHDMI1							切换到 HDMI 输入 #1。
								(KEYCODE_TV_INPUT_HDMI_1)
			KEY_OPT TVInputHDMI2							切换到 HDMI 输入 #2。 
								(KEYCODE_TV_INPUT_HDMI_2)
			KEY_OPT TVInputHDMI3							切换到 HDMI 输入 #3。 
								(KEYCODE_TV_INPUT_HDMI_3)
			KEY_OPT TVInputHDMI4							切换到 HDMI 输入 #4。 
								(KEYCODE_TV_INPUT_HDMI_4)
			KEY_OPT TVInputVGA1								切换到 VGA 输入 #1。
								(KEYCODE_TV_INPUT_VGA_1)
			KEY_OPT TVMediaContext						媒体上下文菜单。
								(KEYCODE_TV_MEDIA_CONTEXT_MENU)
			KEY_OPT TVNetwork									切换网络。 (KEYCODE_TV_NETWORK)
			KEY_OPT TVNumberEntry							数字输入。 (KEYCODE_TV_NUMBER_ENTRY)
			KEY_OPT TVPower										外部电视上的电源开关。 
								(KEYCODE_TV_POWER)
			KEY_OPT TVRadioService						音频。 (KEYCODE_TV_RADIO_SERVICE)
			KEY_OPT TVSatellite								卫星。 (KEYCODE_TV_SATELLITE)
			KEY_OPT TVSatelliteBS							广播卫星。 (KEYCODE_TV_SATELLITE_BS)
			KEY_OPT TVSatelliteCS							通信卫星。 (KEYCODE_TV_SATELLITE_CS)
			KEY_OPT TVSatelliteToggle					在可用卫星之间切换。
								(KEYCODE_TV_SATELLITE_SERVICE)
			KEY_OPT TVTerrestrialAnalog				模拟地面流传(Analog Terrestrial)。 
								(KEYCODE_TV_TERRESTRIAL_ANALOG)
			KEY_OPT TVTerrestrialDigital			数字地面流传(Digital Terrestrial)。
								(KEYCODE_TV_TERRESTRIAL_DIGITAL)
			KEY_OPT TVTimer										定时器编程。
								(KEYCODE_TV_TIMER_PROGRAMMING)
		END_KEY_TABLE

	<h3 id="keys-media-controller">媒体控制器按键</h3>

		媒体控制器(media controllers)的 [=键属性值=] (例如电视、
		音频系统和机顶盒的遥控器)部分源自消费者电子技术规范:

		*	数字电视应用软件环境 [[DASE]]
		*	开放式电缆应用平台 1.1.3 [[OCAP]]
		*	ANSI/CTA-2014-B，基于 Web 的关于 UPnP 网络和互联网的远程用户界面协议和框架
			[[WEB4CE]]
		*	安卓键事件键码(Android KeyEvent KEYCODEs) [[AndroidKeycode]]

		BEGIN_KEY_TABLE media-controller
			KEY_OPT AVRInput						在外部 AVR (音频/视频接收器)上切换输入模式。 
									(KEYCODE_AVR_INPUT)
			KEY_OPT AVRPower						外部 AVR (音频/视频接收器)的电源开关。
									(KEYCODE_AVR_POWER)
			KEY_OPT ColorF0Red					通用彩色编码媒体功能键，索引为 0 (红)。
									(VK_COLORED_KEY_0, KEYCODE_PROG_RED)
			KEY_OPT ColorF1Green				通用彩色编码媒体功能键，索引为 1 (绿)。 
									(VK_COLORED_KEY_1, KEYCODE_PROG_GREEN)
			KEY_OPT ColorF2Yellow				通用彩色编码媒体功能键，索引为 2 (黄)。
									(VK_COLORED_KEY_2, KEYCODE_PROG_YELLOW)
			KEY_OPT ColorF3Blue					通用彩色编码媒体功能键，索引为 3 (蓝)。 
									(VK_COLORED_KEY_3, KEYCODE_PROG_BLUE)
			KEY_OPT ColorF4Grey					通用彩色编码媒体功能键，索引为 4 (灰)。
									(VK_COLORED_KEY_4)
			KEY_OPT ColorF5Brown				通用彩色编码媒体功能键，索引为 5 (棕)。 
									(VK_COLORED_KEY_5)
			KEY_OPT ClosedCaptionToggle	触发闭路字幕(Colose Captions)的显示。
									(VK_CC, KEYCODE_CAPTIONS)
			KEY_OPT Dimmer							通过在状态之间循环切换来调整设备的亮度。 
									(VK_DIMMER)
			KEY_OPT DisplaySwap					交换视频源。(VK_DISPLAY_SWAP)
			KEY_OPT DVR									选择数字视频录像机。 (KEYCODE_DVR)
			KEY_OPT Exit								退出当前应用程序。 (VK_EXIT)
			KEY_OPT FavoriteClear0			清除存储为收藏夹第 0 项的节目或内容。
									(VK_CLEAR_FAVORITE_0)
			KEY_OPT FavoriteClear1			清除存储为收藏夹第 1 项的节目或内容。
									(VK_CLEAR_FAVORITE_1)
			KEY_OPT FavoriteClear2			清除存储为收藏夹第 2 项的节目或内容。
									(VK_CLEAR_FAVORITE_2)
			KEY_OPT FavoriteClear3			清除存储为收藏夹第 3 项的节目或内容。
									(VK_CLEAR_FAVORITE_3)
			KEY_OPT FavoriteRecall0			选择(调用)存储为收藏夹第 0 项的节目或内容。
									(VK_RECALL_FAVORITE_0)
			KEY_OPT FavoriteRecall1			选择(调用)存储为收藏夹第 1 项的节目或内容。 
									(VK_RECALL_FAVORITE_1)
			KEY_OPT FavoriteRecall2			选择(调用)存储为收藏夹第 2 项的节目或内容。 
									(VK_RECALL_FAVORITE_2)
			KEY_OPT FavoriteRecall3			选择(调用)存储为收藏夹第 3 项的节目或内容。 
									(VK_RECALL_FAVORITE_3)
			KEY_OPT FavoriteStore0			将当前节目或内容存储为收藏夹第 0 项。 
									(VK_STORE_FAVORITE_0)
			KEY_OPT FavoriteStore1			将当前节目或内容存储为收藏夹第 1 项。 
									(VK_STORE_FAVORITE_1)
			KEY_OPT FavoriteStore2			将当前节目或内容存储为收藏夹第 2 项。 
									(VK_STORE_FAVORITE_2)
			KEY_OPT FavoriteStore3			将当前节目或内容存储为收藏夹第 3 项。 
									(VK_STORE_FAVORITE_3)
			KEY_OPT Guide								触发节目或内容指南的显示。
									(VK_GUIDE, KEYCODE_GUIDE)
			KEY_OPT GuideNextDay				如果指南处于活动状态并已显示，
									则显示第二天的内容。(VK_NEXT_DAY)
			KEY_OPT GuidePreviousDay		如果指南处于活动状态并已显示，
									则显示前一天的内容。(VK_PREV_DAY)
			KEY_OPT Info								触发当前所选上下文或媒体信息的显示。
									(VK_INFO, KEYCODE_INFO)
			KEY_OPT InstantReplay				触发即时重播(instant replay)。 
									(VK_INSTANT_REPLAY)
			KEY_OPT Link								启动链接内容(如果可用且适当)。 (VK_LINK)
			KEY_OPT ListProgram					列出当前节目。(VK_LIST)
			KEY_OPT LiveContent					触发当前可看的实时内容或节目的列表显示。 
									(VK_LIVE)
			KEY_OPT Lock								锁定或解锁当前内容或节目。(VK_LOCK)
			KEY_OPT MediaApps						显示媒体应用程序列表: 音频/
									视频播放器和图像查看器。(VK_APPS) <p class="note">
									不要将此键值与 Windows 的 VK_APPS / VK_CONTEXT_MENU 键混淆，
									后者编码为 KEY{ContextMenu} 。</p>
			KEY_OPT MediaAudioTrack			音轨键。(KEYCODE_MEDIA_AUDIO_TRACK)
			KEY_OPT MediaLast						选择以前选择的频道或媒体。
									(VK_LAST, KEYCODE_LAST_CHANNEL)
			KEY_OPT MediaSkipBackward		向后跳过(skip)下一个内容或节目。 
									(KEYCODE_MEDIA_SKIP_BACKWARD)
			KEY_OPT MediaSkipForward		向前跳过(skip)下一个内容或节目。 
									(VK_SKIP, KEYCODE_MEDIA_SKIP_FORWARD)
			KEY_OPT MediaStepBackward		后退到下一个内容或节目。
									(KEYCODE_MEDIA_STEP_BACKWARD)
			KEY_OPT MediaStepForward		前进到下一个内容或节目。
									(KEYCODE_MEDIA_STEP_FORWARD)
			KEY_OPT MediaTopMenu				媒体顶部菜单。 (KEYCODE_MEDIA_TOP_MENU)
			KEY_OPT NavigateIn					导航——进入。 (KEYCODE_NAVIGATE_IN)
			KEY_OPT NavigateNext				导航到下一个键。 (KEYCODE_NAVIGATE_NEXT)
			KEY_OPT NavigateOut					导航——出去。 (KEYCODE_NAVIGATE_OUT)
			KEY_OPT NavigatePrevious		导航到上一个键。 (KEYCODE_NAVIGATE_PREVIOUS)
			KEY_OPT NextFavoriteChannel	循环到下一个收藏夹频道(在收藏夹列表中)。 
									(VK_NEXT_FAVORITE_CHANNEL)
			KEY_OPT NextUserProfile			循环到下一个用户主页(如果有多个用户主页)。
									(VK_USER)
			KEY_OPT OnDemand						访问点播内容或节目。 (VK_ON_DEMAND)
			KEY_OPT Pairing							将按键与设备配对。 (KEYCODE_PAIRING)
			KEY_OPT PinPDown						移下画中画(picture-in-picture)窗口。
									(VK_PINP_DOWN)
			KEY_OPT PinPMove						移动画中画(picture-in-picture)窗口。
									(VK_PINP_MOVE)
			KEY_OPT PinPToggle					触发画中画(picture-in-picture)窗口的显示。
									(VK_PINP_TOGGLE)
			KEY_OPT PinPUp							移上画中画(picture-in-picture)窗口。
									(VK_PINP_UP)
			KEY_OPT PlaySpeedDown				降低媒体播放速度。(VK_PLAY_SPEED_DOWN)
			KEY_OPT PlaySpeedReset			将播放速度重置为正常速度。
									(VK_PLAY_SPEED_RESET)
			KEY_OPT PlaySpeedUp					提高媒体播放速度。(VK_PLAY_SPEED_UP)
			KEY_OPT RandomToggle				切换到随机媒体或内容混洗模式。
									(VK_RANDOM_TOGGLE)
			KEY_OPT RcLowBattery				不是物理按键，
									但此键码是在遥控器电池电量不足时发送的。(VK_RC_LOW_BATTERY)
			KEY_OPT RecordSpeedNext			在媒体录制速度之间循环切换。
									(VK_RECORD_SPEED_NEXT)
			KEY_OPT RfBypass						触发 RF (射频)输入旁路模式(将 RF 
									输入直接传递到 RF 输出)。 (VK_RF_BYPASS)
			KEY_OPT ScanChannelsToggle	切换到扫描通道模式。 (VK_SCAN_CHANNELS_TOGGLE)
			KEY_OPT ScreenModeNext			将显示屏模式前进到下一个可用模式。
									(VK_SCREEN_MODE_NEXT)
			KEY_OPT Settings						触发设备设置屏幕的显示。 (VK_SETTINGS, 
									KEYCODE_SETTINGS)
			KEY_OPT SplitScreenToggle		切换到分屏模式。 (VK_SPLIT_SCREEN_TOGGLE)
			KEY_OPT STBInput						在外部 STB (机顶盒)上切换输入模式。
									(KEYCODE_STB_INPUT)
			KEY_OPT STBPower						外部 STB(机顶盒)的电源开关。
									(KEYCODE_STB_POWER)
			KEY_OPT Subtitle						触发字幕的显示(如果可用)。(VK_SUBTITLE)
			KEY_OPT Teletext						触发图文电视的显示(如果可用)。(VK_TELETEXT, 
									KEYCODE_TV_TELETEXT)
			KEY_OPT VideoModeNext				将视频模式前进到下一个可用模式。 
									(VK_VIDEO_MODE_NEXT)
			KEY_OPT Wink								使设备以某种方式识别自身，例如，听觉或视觉。 
									(VK_WINK)
			KEY_OPT ZoomToggle					在全屏和缩放内容之间切换，或更改缩放级别
									(magnification level)。(VK_ZOOM, KEYCODE_TV_ZOOM_MODE)
		END_KEY_TABLE

		媒体控制器标准中定义的一些按键已经在本规范的其他部分中定义了合适的按键。
		下表总结了这些键被支持的情况下 <span class="zh-upper">必须</span> 
		使用的键值: 

		BEGIN_KEY_TABLE media-controller-dup
			KEY_DUP_OPT AudioVolumeDown			降低音频音量。(VK_VOLUME_DOWN)
			KEY_DUP_OPT AudioVolumeUp				增加音频音量。(VK_VOLUME_UP)
			KEY_DUP_OPT AudioVolumeMute			在静音状态和先前音量水平(prior volume 
									level) 之间进行切换。 (VK_VOLUME_MUTE)
			KEY_DUP_OPT BrowserBack					导航到当前历史记录中的上一个内容或页面。 
									(VK_BACK)
			KEY_DUP_OPT BrowserForward			导航到当前历史记录中的下一个内容或页面。 
									(VK_FORWARD)
			KEY_DUP_OPT ChannelDown					选择下一个(数字上地或逻辑上地)较低的频道。
									(VK_CHANNEL_DOWN)
			KEY_DUP_OPT ChannelUp						选择下一个(数字上地或逻辑上地)较高的频道。 
									(VK_CHANNEL_UP)
			KEY_DUP ContextMenu							触发屏幕菜单的显示。 (VK_MENU)
			KEY_DUP_OPT Eject								将可移动媒介(removable media)切换到弹出 
									(打开)和插入(关闭)状态。(VK_EJECT_TOGGLE)
			KEY_DUP End											结束(End)键，配合键盘输入使用，
									用于跳转到输入内容的末尾。 (VK_GO_TO_END)
			KEY_DUP Enter										Enter 键，用于激活当前选择或接受当前输入。
									(VK_SELECT)
			KEY_DUP Home										Home 键，配合键盘输入使用，
									用于跳转到输入内容的开头。 (VK_GO_TO_START)
			KEY_DUP_OPT MediaFastForward		以比正常速度更快的速度启动或
									继续向前播放媒体，如果已经快进，则增加播放速度。 (VK_FAST_FWD)
			KEY_DUP_OPT MediaPlay						如果当前未以正常速度播放， 
									则以正常速度启动或继续播放媒体。 (VK_PLAY)
			KEY_DUP_OPT MediaPlayPause			在媒体的播放和暂停状态之间切换。 
									(VK_PLAY_PAUSE)
			KEY_DUP_OPT MediaRecord					启动或恢复当前所选媒体的录制。(VK_RECORD)
			KEY_DUP_OPT MediaRewind					以比正常速度更快的速度启动或继续回退
									(reverse) 播放媒体，如果已经回退，则提高回退速度。 (VK_REWIND)
			KEY_DUP_OPT MediaStop						停止播放、暂停、快进、回退或录制媒体
									(如果尚未停止)。 (VK_STOP)
			KEY_DUP_OPT MediaPause					暂停当前播放的媒体。 (VK_PAUSE)
			KEY_DUP_OPT MediaTrackNext			查找下一个媒体或节目(program track)。 
									(VK_TRACK_NEXT)
			KEY_DUP_OPT MediaTrackPrevious	查找上一个媒体或节目(program track)。 
									(VK_TRACK_PREV)
			KEY_DUP_OPT Power								切换电源状态(电源开关)。 (VK_POWER)
			KEY_DUP Unidentified						当一个实现由于硬件、
									平台或软件限制而无法识别另一个键值时 ，会使用此键值。
									(VK_UNDEFINED)
		END_KEY_TABLE

<h2 id="accessibility">无障碍</h2>

	这个规范简单地定义了一组可在 {{KeyboardEvent/key}} 属性中使用的有效值。 
	因此，它没有引入任何具有无障碍问题的特性(feature)。
	
	<a href="https://w3c.github.io/apa/fast/checklist.html">FAST 清单</a> 已完成，
	本规范不适用其中任何内容。

	<div class="note custom-note">
	FAST: Framework for Accessibility in the Specification of Technologies，
	技术文档的无障碍框架。<q>FAST的目标是描述网络技术应提供的特性，
	以确保能够创建残疾用户可以访问的内容。完整的框架引入了对用户需求的分析，
	描述了技术、内容创作和用户代理如何协同工作以满足这些需求，
	并为技术开发人员提供了全面的指导。本清单(checklist)从高层次上提取这些信息，
	以帮助技术进行自我审查。
	规范开发人员可以利用本清单(checklist)
	来帮助自己: 确保技术能够解决无障碍倡导者在横向审查期间可能提出的特性。</q>
	—— <abbr 
	title="Framework for Accessibility in the Specification of Technologies">
	FAST</abbr> Checklist。
	</div>

	FAST 清单的一个条目是: "如果技术提供国际化支持"。此条目与本规范相关: 
	本规范本质上为键盘定义了 {{KeyboardEvent/key}} 值，这个 <code>key</code> 
	值支持国际硬件，例如用于不同语言或布局的键盘。同时，本规范也定义了许多人类可读
	(human-readable)的键名称(如"Shift"、"Control"、"Home"或"ArrowLeft")。
	
	一些特殊按键的键值被定义为人类可读(human-readable)的字符串，
	以便检测特殊键的代码更容易理解。虽然这些值并不打算直接暴露给用户
	(没有在键帽上显示)，但想要公开这些值无可厚非。
	选择公开这些值的应用程序需要确定: 为了显示而翻译这些字符串是否合适
	(例如: 为法国用户将"Backspace"显示为"Suppr.arrière")。

<h2 id="i18n">国际化(i18n)</h2>

	<a 
	href="https://www.w3.org/International/i18n-drafts/techniques/shortchecklist">
	简版的 I18n 清单</a> 已完成，本规范不适用其中任何内容。

<h2 id="security">安全注意事项</h2>

	<a href="https://www.w3.org/TR/security-privacy-questionnaire/">
	安全和隐私的自我审查问卷</a> 已完成，以下是对其中一些有关本规范条目的备注:
	
	* <em><a href="https://www.w3.org/TR/security-privacy-questionnaire/#purpose">
		2.1 此特性可能会向网站或其他方公开哪些信息，出于什么目的需要公开?</a></em> :
		本规范为各种按键事件的 {{KeyboardEvent/key}} 属性定义了一组有效值。
		这提供了一种方式让用户可以键入文本，非常有必要。

	* <em>
		<a 
		href=
		"https://www.w3.org/TR/security-privacy-questionnaire/#non-fully-active">
		2.17 您的功能是如何处理非"完全活动(fully active)"文档的?</a></em>:
		此属性仅与按键事件关联，如果文档未完全激活，则不会派发事件。

	[[UIEvents]] 规范中解决了与 {{KeyboardEvent/key}} 属性相关的安全问题。
	
<h2 id="privacy">隐私注意事项</h2>

	<a href="https://www.w3.org/TR/security-privacy-questionnaire/">
	安全和隐私的自我审查问卷</a> 已完成，以下是对其中一些有关本规范条目的备注:
	
	* <em><a href="https://www.w3.org/TR/security-privacy-questionnaire/#underlying-platform-data">
		2.6 规范中的特性是否向源(origins)公开了有关底层平台的信息?</a></em>:
		{{KeyboardEvent/key}} 属性包含用户按下的键的的值。
		这可以用来推断用户正在使用的启用了特定语言环境(或 [=IME=] )的键盘。

	* <em><a href=
		"https://www.w3.org/TR/security-privacy-questionnaire/#legitimate-misuse">
		3.5 合法滥用(Legitimate Misuse)</a></em>: 一个站点可以捕获所有按键响应，
		并构建键盘生成的按键值的映射。如果用户键入了足够的按键值(并且没有更改键盘)，
		那么网站可以尝试将这些值与已知键盘布局的数据库进行匹配，
		以猜测用户当前的键盘布局。然而，这是对 {{KeyboardEvent/key}} 属性本身
		(在 [[UIEvents]] 规范中定义)的关注，而不是对本文档中定义的值的关注。

	[[UIEvents]] 规范中解决了与 {{KeyboardEvent/key}} 属性相关的隐私问题。
	
<h2 id="acknowledgements-contributors">致谢</h2>

	多年来，许多人为 DOM {{KeyboardEvent}} 规范做出了贡献，
	其中包括 DOM 工作组和 WebApps 工作组的许多参与者。当前的 {{KeyboardEvent/key}}
	值集是在此期间迭代许多提议和变体的结果。我们特别感谢以下参与者的贡献:

	Gary Kacmarcik (Google)，
	Masayuki Nakano (Mozilla)
	和
	Travis Leithead (Microsoft)。
